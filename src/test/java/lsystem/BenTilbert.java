package lsystem;

/* autogenerated by Processing preprocessor v3.0.0 on 2020-08-30 */
import processing.core.*;

import java.text.CharacterIterator;
import lsystem.util.ArcBall;


public class BenTilbert extends PApplet {

  /**
   * A 3D LSystem example with a SimpleGrammar This LSystem library is available
   * at Github https://github.com/monkstone/LSystems
   */

  /*
 * Copyright (c) 2011-20 Martin Prout
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
   */
  float HALF = PI / 360; // half a degree error
  String axiom = "A";
  String production;
  float THETA = HALF_PI + HALF;
  float PHI = HALF_PI - HALF;
  ArcBall arcball;
  Grammar grammar;

  @Override
  public void setup() {
    /* size commented out by preprocessor */
    noStroke();
    grammar = new SimpleGrammar(this, axiom);
    grammar.addRule('A', "B>F<CFC<F>D+F-D>F<1+CFC<F<B1^");
    grammar.addRule('B', "A+F-CFB-F-D1->F>D-1>F-B1>FC-F-A1^");
    grammar.addRule('C', "1>D-1>F-B>F<C-F-A1+FA+F-C<F<B-F-D1^");
    grammar.addRule('D', "1>CFB>F<B1>FA+F-A1+FB>F<B1>FC1^");
    grammar.generateGrammar(3);
  }

  /**
   *
   */
  @Override
  public void draw() {
    int repeats = 1;
    int col = color(0, 225, 0);
    lights();
    directionalLight(128, 128, 128, 0, 0, 1);
    background(0);
    CharacterIterator it = grammar.getIterator();
    for (char ch = it.first(); ch != CharacterIterator.DONE; ch = it.next()) {
      switch (ch) {
        case 'F':
          fill(col);
          float len = 20;
          translate(0, 0, -len / 2);
          box(3, 3, len - 1.6f);
          translate(0, 0, -len / 2);
          box(3, 3, 3);
          break;
        case '+':
          rotateX(THETA * repeats);
          repeats = 1;
          break;
        case '-':
          rotateX(-THETA * repeats);
          repeats = 1;
          break;
        case '>':
          rotateY(THETA * repeats);
          repeats = 1;
          break;
        case '<':
          rotateY(-THETA * repeats);
          repeats = 1;
          break;
        case '^':
          rotateZ(PHI * repeats);
          repeats = 1;
          break;
        case '1':
          repeats += 1;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          break;
        default:
          System.err.println("character " + ch + " not in grammar");
      }
    }
  }

  @Override
  public void settings() {
    size(600, 600, P3D);
  }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[]{"BenTilbert"};
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
